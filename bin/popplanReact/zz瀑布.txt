要研究filter攔截  --解決 用isLoaded 來處理fetch的非同步問題

處理瀑布流報錯 --解決  const [page, setPage] = useState(3); // 當前頁數扣除2頁 應該由3開始

然後呢 exception 和路徑的整理

加上 React util 為了驗證欄位

創建活動失敗  請先登入  --解決 用 credentials: 'include'  credentials : 'include'


敘述瀑布流的核心問題 可寫在自傳上
📝 專案功能取捨說明：瀑布流載入與資料分頁的技術選型
在這個專案中，我實作了活動卡片的瀑布流加載效果，讓使用者能夠持續滑動載入更多內容。起初我對資料分頁方式進行了深入評估，並面臨一個常見的技術抉擇：

是要「一次性載入所有資料，前端進行展示與篩選」？
還是「使用後端游標分頁，逐次載入資料並支援條件查詢」？

在考量多個使用者場景與資料變動風險後，我選擇了 前端一次性載入 + 瀑布流動態展開 的策略。

✅ 決策考量如下：
1. 資料量體可控
本專案為 DEMO 性質，資料筆數約數百至千筆，完全可在初次載入時一次性存入記憶體，不會對效能造成實質負擔。

2. 前端需求較強（支援篩選）
活動卡片設計包含 標籤篩選功能（tag-based filtering），若使用後端分頁，每次切換篩選條件都需重新請求資料，這將增加回應延遲；而採用前端記憶體操作，可以即時篩選並優化體驗。

3. 分頁機制的設計風險
與瀑布流不同，分頁式網頁需要處理總頁數與精確跳頁問題。當資料持續新增或刪除時，可能導致頁面內容錯位，例如使用者點選「第 4 頁」，實際看到的卻是錯誤的一批資料。這種狀況在資料不穩定時尤其難以掌控。

4. 瀑布流設計簡潔且 UX 更自然
用戶習慣向下滑動探索新資訊，瀑布流能以游標（如 created_at）控制資料順序，避免「頁碼跳轉」造成的技術與體驗斷裂，也更貼合現代用戶操作習慣。

5. 權衡開發效率
在有限時程內，我選擇優先讓核心體驗（瀑布流與篩選）穩定落地，待資料規模擴大後，再替換為真正的後端 API 分頁機制。

🛠 技術延伸規劃（可成長性設計）
即使目前採用一次性載入，我仍預留了後續轉型的彈性：

利用 created_at 作為游標基礎，可支援後端分頁查詢，例如 API 路由：GET /events?after=2024-12-01T00:00:00Z

保留前端狀態管理邏輯（如 cursor, hasMore, loading），只需替換資料來源即可無痛過渡

若轉為分頁模式，可切換為 limit-offset 或 cursor-based 分頁，滿足更大型資料應用需求

📌 技術選型沒有對錯，只有適不適合當下情境。
我的選擇不是為了偷懶，而是基於體驗優先與實作效率最大化的合理判斷。

🧠 面試延伸說法建議（可口述版本）：
在這個專案中，我一開始就意識到活動資料會隨著時間不斷新增，因此在資料展示上，我評估了分頁與瀑布流兩種方案。

分頁的話，會需要知道總筆數與頁碼，而只要資料一變動，就有可能造成跳頁錯位、資料不一致等問題，特別是使用者直接跳第 10 頁這種行為，更需要複雜的總頁管理與同步。

相較之下，我選擇使用瀑布流，並在前端一次性載入資料，這樣可以支援即時的篩選功能，也更貼合用戶持續滑動探索的體驗。

雖然目前是 DEMO 專案，資料量不大，但我仍保留了 cursor-based 分頁邏輯的彈性，只要將資料來源切換為後端 API，就能實現真正的按需載入。

技術選型的關鍵在於當下的需求與資源，我會思考未來擴充性，但同時確保目前版本能夠快速落地並交付用戶價值。

---------------------------------

🗣️ 口語化面試稿（瀑布流 vs 分頁，簡單好懂版）
在做這個專案的時候，我有思考一件事，就是活動資料以後會越來越多，甚至可能會一直有人新增。那我在設計資料怎麼呈現時，就有兩種做法可以選：

一種是傳統的「分頁模式」，像是每頁顯示 6 筆，然後可以點到第 2 頁、第 3 頁這樣。但這種做法有一個問題是，如果資料一直在變，像是新增或刪除，就會讓頁面亂掉，使用者點了第 5 頁，看到的東西可能其實早就被推掉或重複了。尤其是有些人會直接跳第 10 頁，那後端就要算很多東西，開發上會變得很複雜。

所以我最後選的是「瀑布流」的方式，也就是使用者往下滑，就會慢慢載入更多資料。為了讓體驗順一點，我是直接在一開始就把所有資料都載進來，這樣就可以在前端快速做篩選，比如按標籤分類，不用再重複請求資料，也比較不會有延遲。

雖然這樣做看起來好像是一次載太多資料，但因為這個專案是 demo，資料只有幾百筆，不會造成太大效能問題。而且我還是有預留以後擴充的空間，例如資料有時間戳記 created_at，可以當作「分頁依據」，未來真的資料變多了，我可以改成每次只拿最新的幾筆。

簡單來說，就是我不是隨便選，而是根據專案階段、資料量、開發效率去做一個最適合當下的選擇。如果以後資料變多，也有設計可以延伸。

✅ 重點標記版（方便你臨時複習）
兩種做法：「分頁」和「瀑布流」

分頁會有跳頁錯亂、總筆數難控的問題

瀑布流 + 一次載入資料 → 篩選快、體驗順

Demo 專案資料量小，可接受一次載入

預留了 created_at 做為以後分頁依據

選技術是看「當下需求」，不是照教科書來
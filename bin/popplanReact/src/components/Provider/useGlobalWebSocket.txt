import { useRef, useEffect, useState, useContext } from 'react';
import SockJS from 'sockjs-client';
import { Client } from '@stomp/stompjs';
import { SessionContext } from './SessionProvider';

// STOMP 主通道 Hook（全域）
export const useGlobalWebSocket = () => {
  const { isLoggedIn, user } = useContext(SessionContext);
  const userId = user?.userId; // 防止 user 為 null 時報錯

  const clientRef = useRef(null);
  const [connected, setConnected] = useState(false);

  useEffect(() => {
    if (!isLoggedIn || !userId) return;

    const socket = new SockJS('http://localhost:8080/websocket');
    const client = new Client({
      webSocketFactory: () => socket,
      reconnectDelay: 5000,
    });

    client.onConnect = () => {
      console.log('🌐 主通道 WebSocket 連線成功');
      setConnected(true);

      client.subscribe(`/topic/notification/${userId}`, (message) => {
        const msg = JSON.parse(message.body);
        console.log('🔔 收到通知：', msg);
        // 👉 可以在這裡呼叫通知系統、存到 state、dispatch 等
      });
    };

    client.onStompError = (error) => {
      console.error('❌ STOMP 錯誤:', error);
    };

    client.activate();
    clientRef.current = client;

    return () => {
      console.log('🛑 主通道 WebSocket 中斷');
      client.deactivate();
      setConnected(false);
    };
  }, [isLoggedIn, userId]);

  return {
    client: clientRef.current,
    connected,
  };
};

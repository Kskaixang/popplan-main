安裝兩個react-bootstrap插件
npm install react-router-dom  跳頁插件
npm install react-bootstrap    bootstrap插件
npm install bootstrap-icons    bootstrap插件icon
npm install react-select  下拉框搜索插件
npm run dev

npm install swiper

統一在main.jsx引入
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';


為什麼AI能逐字顯示
回答開頭：用比較說明
一般的 HTTP 請求，例如用 fetch() 或 axios，伺服器會在所有資料準備好後一次回傳 JSON，再由前端一次渲染畫面。

但這種方式無法達成「逐字顯示」，因為伺服器得等處理完畢才能回應。

✅ 中段：切入 SSE 的核心概念
相反的，Server-Sent Events（SSE）是一種單向的持久連線技術，它讓瀏覽器透過 EventSource 開一條 HTTP 連線之後，這條連線不會馬上關閉。

伺服器會使用一種特別的 Content-Type（叫做 text/event-stream），然後把資料一段一段地用事件格式傳送過來，前端就可以逐字接收與顯示。

✅ 重點一句（面試官會記住這句）
SSE 的關鍵不是「資料格式不同」，而是「它維持一條不關閉的連線，讓伺服器可以多次回應」。


200	一切正常	✅ 你填了報名表 → 系統收到了 → 回你：「收到了！」
201	資源成功建立	✅ 你註冊帳號成功 → 系統幫你建了一個新帳號 → 回你：「已幫你建立好！」
202	接受請求但還沒完成	🕒 你報名成功，但要等審核 → 系統回：「我收到了，但還在處理中」
204	成功但沒內容	✅ 你成功取消訂單 → 系統沒話好說 → 回你：「我成功取消了（但沒資料回你）」

400	你送錯資料	❌ 你報名表漏填資料或格式錯 → 被退件：「格式錯誤，重填！」
401	未授權（沒登入）	🔐 你想進系統查成績 → 沒登入 → 被擋在門外：「請先登入！」
403	禁止存取	⛔ 你有登入但沒權限 → 想看別人的成績 → 系統說：「你不能看這頁！」
404	找不到東西	❓ 網址打錯 → 沒有那張表單 → 系統說：「找不到你要的東西」
409	衝突	⚠️ 你註冊帳號時 → 帳號已經存在 → 回你：「這帳號被用過了」
422	資料合法但不合理	❗ 你填的資料格式對，但邏輯不通（ex: 出生日期填未來）→ 回你：「無法接受這資料」

500	伺服器壞了	💥 你填資料都對 → 送出後網站爆炸 → 系統說：「我出事了」
502	Bad Gateway	🌐 你填單後 → 系統要去問其他伺服器 → 結果對方沒回 → 「別人爆炸了」
503	服務暫停	🛠️ 系統正在維修中 → 回你：「現在不能用，請等等」
504	Gateway Timeout	⏱️ 系統等另一台太久 → 超時 → 回你：「等太久了，我放棄了」
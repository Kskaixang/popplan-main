✅ 用白話說出 Session vs JWT 的差異（面試/簡報可用）

https://ithelp.ithome.com.tw/articles/10359913


🎯 1. 核心概念不同
Session	JWT
身分儲存位置	儲存在「後端」	儲存在「前端」（token）
每次請求怎麼驗證身分？	伺服器查 Session ID 對應的用戶資料	後端驗證 JWT 是否有效、從中取出用戶資訊
是否「有狀態」	有狀態（伺服器記得你）	無狀態（伺服器不記你，靠 token 自我證明）

🎯 2. 流程差異（白話解釋）
✅ Session 的流程（比較像門禁卡）：
你用帳密登入

伺服器把你「的身分」記在記憶體裡（session）

給你一張「門禁卡」上有 session ID（cookie）

你之後每次請求 → 帶著那張卡 → 伺服器對照 session 資料，認出你是誰

✅ JWT 的流程（比較像身分證）：
你用帳密登入

伺服器發一張加密的「身分證」JWT 給你，裡面寫著你是誰

你以後每次請求都帶著這張 JWT

伺服器不需要查資料庫，直接看身分證就知道你是誰（如果證件有效）

🎯 3. 各自的優缺點（可套用面試口條）
✅ Session 的優點：
實作簡單，容易控制登入狀態

可以即時強制登出、封鎖某人（因為資料在伺服器）

❌ Session 的缺點：
伺服器要維護大量使用者狀態（記憶體、Redis 等）

不適合做大規模擴展或「無狀態部署」

✅ JWT 的優點：
使用者資訊存在 token 裡，伺服器不需存狀態

適合多平台登入（手機、前端分離）

Token 可設定有效時間、自動失效

❌ JWT 的缺點：
無法「即時讓某 token 失效」，除非加黑名單（複雜）

如果 token 被偷走，就像身分證掉了，誰拿到誰就是你

✅ 總結一句話（講給主管/面試官聽）
「Session 是伺服器記得我，JWT 是我自己證明我是誰。Session 適合小型或傳統網站，JWT 則更適合現代前後端分離、多端整合的架構。」

如果你要做簡報或學長問你這段的話，你就可以這樣開場：

「目前專案用的是 session 機制，也就是後端記住每個使用者的登入狀態。雖然這樣做簡單、安全性也不錯，但如果未來要改成 API 架構或支援多平台，就可能會考慮 JWT，它可以讓前端攜帶自己的登入 token，實現無狀態登入。不過 JWT 也有安全管理上的挑戰，比如 token 遺失就很難回收，除非多一層黑名單管理。」